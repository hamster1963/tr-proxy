// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: G2rc.proto

package G2Proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	G2Grpc_Service_FullMethodName = "/pb.G2Grpc/Service"
)

// G2GrpcClient is the client API for G2Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type G2GrpcClient interface {
	Service(ctx context.Context, in *G2ReqData, opts ...grpc.CallOption) (G2Grpc_ServiceClient, error)
}

type g2GrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewG2GrpcClient(cc grpc.ClientConnInterface) G2GrpcClient {
	return &g2GrpcClient{cc}
}

func (c *g2GrpcClient) Service(ctx context.Context, in *G2ReqData, opts ...grpc.CallOption) (G2Grpc_ServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &G2Grpc_ServiceDesc.Streams[0], G2Grpc_Service_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &g2GrpcServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type G2Grpc_ServiceClient interface {
	Recv() (*G2ResData, error)
	grpc.ClientStream
}

type g2GrpcServiceClient struct {
	grpc.ClientStream
}

func (x *g2GrpcServiceClient) Recv() (*G2ResData, error) {
	m := new(G2ResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// G2GrpcServer is the server API for G2Grpc service.
// All implementations must embed UnimplementedG2GrpcServer
// for forward compatibility
type G2GrpcServer interface {
	Service(*G2ReqData, G2Grpc_ServiceServer) error
	mustEmbedUnimplementedG2GrpcServer()
}

// UnimplementedG2GrpcServer must be embedded to have forward compatible implementations.
type UnimplementedG2GrpcServer struct {
}

func (UnimplementedG2GrpcServer) Service(*G2ReqData, G2Grpc_ServiceServer) error {
	return status.Errorf(codes.Unimplemented, "method Service not implemented")
}
func (UnimplementedG2GrpcServer) mustEmbedUnimplementedG2GrpcServer() {}

// UnsafeG2GrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to G2GrpcServer will
// result in compilation errors.
type UnsafeG2GrpcServer interface {
	mustEmbedUnimplementedG2GrpcServer()
}

func RegisterG2GrpcServer(s grpc.ServiceRegistrar, srv G2GrpcServer) {
	s.RegisterService(&G2Grpc_ServiceDesc, srv)
}

func _G2Grpc_Service_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(G2ReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(G2GrpcServer).Service(m, &g2GrpcServiceServer{stream})
}

type G2Grpc_ServiceServer interface {
	Send(*G2ResData) error
	grpc.ServerStream
}

type g2GrpcServiceServer struct {
	grpc.ServerStream
}

func (x *g2GrpcServiceServer) Send(m *G2ResData) error {
	return x.ServerStream.SendMsg(m)
}

// G2Grpc_ServiceDesc is the grpc.ServiceDesc for G2Grpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var G2Grpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.G2Grpc",
	HandlerType: (*G2GrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Service",
			Handler:       _G2Grpc_Service_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "G2rc.proto",
}
